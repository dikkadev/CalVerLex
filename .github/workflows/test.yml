name: Test CalVerLex Action

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test-basic:
    runs-on: ubuntu-latest
    name: Test Basic Functionality
    steps:
      - uses: actions/checkout@v4
      
      - name: Test CalVerLex - Basic
        id: test-basic
        uses: ./
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
      
      - name: Validate Output
        run: |
          echo "Generated tag: ${{ steps.test-basic.outputs.tag }}"
          
          # Calculate expected full tag (should be today's date + suffix 'a')
          year=$(date -u +%y)
          week=$(date -u +%V)
          day=$(date -u +%u)
          expected_tag="${year}$(printf "%02d" $week)${day}a"
          echo "Expected tag: $expected_tag"
          
          # Validate the complete tag
          if [ "${{ steps.test-basic.outputs.tag }}" = "$expected_tag" ]; then
            echo "✅ Generated tag matches expected: $expected_tag"
          else
            echo "❌ Tag mismatch. Expected: $expected_tag, Got: ${{ steps.test-basic.outputs.tag }}"
            exit 1
          fi

  test-with-current-version:
    runs-on: ubuntu-latest
    name: Test With Current Version Override
    steps:
      - uses: actions/checkout@v4
      
      - name: Calculate current date version
        id: calc-version
        run: |
          # Calculate today's prefix with suffix 'a'
          year=$(date -u +%y)
          week=$(date -u +%V)
          day=$(date -u +%u)
          current_version="${year}$(printf "%02d" $week)${day}a"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          echo "Expected current version: $current_version"
      
      - name: Test CalVerLex - With Current Version
        id: test-current
        uses: ./
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          current_version: ${{ steps.calc-version.outputs.current_version }}
      
      - name: Validate Output
        run: |
          echo "Generated tag: ${{ steps.test-current.outputs.tag }}"
          echo "Input current version: ${{ steps.calc-version.outputs.current_version }}"
          
          # Calculate expected next version (should be 'b' suffix)
          year=$(date -u +%y)
          week=$(date -u +%V)
          day=$(date -u +%u)
          expected_tag="${year}$(printf "%02d" $week)${day}b"
          echo "Expected tag: $expected_tag"
          
          # Validate format
          if [[ "${{ steps.test-current.outputs.tag }}" =~ ^[0-9]{2}(0[1-9]|[1-4][0-9]|5[0-3])[1-7][a-z]+$ ]]; then
            echo "✅ Tag format is valid"
            
            # Validate that it's the expected next version
            if [ "${{ steps.test-current.outputs.tag }}" = "$expected_tag" ]; then
              echo "✅ Correct suffix increment: a → b"
            else
              echo "❌ Incorrect suffix increment. Expected: $expected_tag, Got: ${{ steps.test-current.outputs.tag }}"
              exit 1
            fi
          else
            echo "❌ Tag format is invalid: ${{ steps.test-current.outputs.tag }}"
            exit 1
          fi

  test-four-digit-year:
    runs-on: ubuntu-latest
    name: Test 4-Digit Year Format
    steps:
      - uses: actions/checkout@v4
      
      - name: Test CalVerLex - 4-Digit Year
        id: test-4digit
        uses: ./
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          year_format: "4"
      
      - name: Validate Output
        run: |
          echo "Generated tag: ${{ steps.test-4digit.outputs.tag }}"
          
          # Calculate expected full 4-digit year tag (should be today's date + suffix 'a')
          year=$(date -u +%Y)
          week=$(date -u +%V)
          day=$(date -u +%u)
          expected_tag="${year}$(printf "%02d" $week)${day}a"
          echo "Expected 4-digit tag: $expected_tag"
          
          # Validate the complete tag
          if [ "${{ steps.test-4digit.outputs.tag }}" = "$expected_tag" ]; then
            echo "✅ Generated 4-digit tag matches expected: $expected_tag"
          else
            echo "❌ 4-digit tag mismatch. Expected: $expected_tag, Got: ${{ steps.test-4digit.outputs.tag }}"
            exit 1
          fi

  test-error-handling:
    runs-on: ubuntu-latest
    name: Test Error Handling
    steps:
      - uses: actions/checkout@v4
      
      - name: Test CalVerLex - Invalid Current Version
        id: test-invalid
        uses: ./
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          current_version: "invalid"
        continue-on-error: true
      
      - name: Validate Error Handling
        run: |
          if [ "${{ steps.test-invalid.outcome }}" = "failure" ]; then
            echo "✅ Error handling works correctly"
          else
            echo "❌ Error handling failed - should have failed with invalid current_version"
            exit 1
          fi

  test-multiple-runs:
    runs-on: ubuntu-latest
    name: Test Multiple Sequential Runs
    steps:
      - uses: actions/checkout@v4
      
      - name: First Run
        id: first-run
        uses: ./
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
      
      - name: Second Run (should increment suffix)
        id: second-run
        uses: ./
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          current_version: ${{ steps.first-run.outputs.tag }}
      
      - name: Validate Sequential Runs
        run: |
          echo "First tag: ${{ steps.first-run.outputs.tag }}"
          echo "Second tag: ${{ steps.second-run.outputs.tag }}"
          
          # Extract prefix and suffix from both tags
          first_tag="${{ steps.first-run.outputs.tag }}"
          second_tag="${{ steps.second-run.outputs.tag }}"
          
          # Extract date prefix (everything before letters)
          first_prefix="${first_tag%[a-z]*}"
          second_prefix="${second_tag%[a-z]*}"
          
          # Extract suffix (letters only)
          first_suffix="${first_tag#${first_prefix}}"
          second_suffix="${second_tag#${second_prefix}}"
          
          echo "First: prefix=$first_prefix, suffix=$first_suffix"
          echo "Second: prefix=$second_prefix, suffix=$second_suffix"
          
          # Validate they have the same date prefix (same day)
          if [ "$first_prefix" = "$second_prefix" ]; then
            echo "✅ Same date prefix: $first_prefix"
            
            # Validate suffix increment (should be a → b)
            if [ "$first_suffix" = "a" ] && [ "$second_suffix" = "b" ]; then
              echo "✅ Correct suffix sequence: a → b"
            else
              echo "❌ Incorrect suffix sequence. Expected: a → b, Got: $first_suffix → $second_suffix"
              exit 1
            fi
          else
            echo "❌ Different date prefixes. Expected same day. First: $first_prefix, Second: $second_prefix"
            exit 1
          fi

  test-suffix-boundary:
    runs-on: ubuntu-latest
    name: Test Suffix Boundary (z → aa)
    steps:
      - uses: actions/checkout@v4
      
      - name: Calculate current date with z suffix
        id: calc-z-version
        run: |
          # Calculate today's prefix with suffix 'z'
          year=$(date -u +%y)
          week=$(date -u +%V)
          day=$(date -u +%u)
          z_version="${year}$(printf "%02d" $week)${day}z"
          echo "z_version=$z_version" >> $GITHUB_OUTPUT
          echo "Testing boundary with: $z_version"
      
      - name: Test CalVerLex - z to aa boundary
        id: test-boundary
        uses: ./
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          current_version: ${{ steps.calc-z-version.outputs.z_version }}
      
      - name: Validate Boundary Increment
        run: |
          echo "Input version: ${{ steps.calc-z-version.outputs.z_version }}"
          echo "Generated tag: ${{ steps.test-boundary.outputs.tag }}"
          
          # Calculate expected next version (should be 'aa' suffix)
          year=$(date -u +%y)
          week=$(date -u +%V)
          day=$(date -u +%u)
          expected_tag="${year}$(printf "%02d" $week)${day}aa"
          echo "Expected tag: $expected_tag"
          
          # Validate that z → aa boundary works correctly
          if [ "${{ steps.test-boundary.outputs.tag }}" = "$expected_tag" ]; then
            echo "✅ Correct boundary increment: z → aa"
          else
            echo "❌ Incorrect boundary increment. Expected: $expected_tag, Got: ${{ steps.test-boundary.outputs.tag }}"
            exit 1
          fi

  summary:
    runs-on: ubuntu-latest
    name: Test Summary
    needs: [test-basic, test-with-current-version, test-four-digit-year, test-error-handling, test-multiple-runs, test-suffix-boundary]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "## CalVerLex Action Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Basic Functionality | ${{ needs.test-basic.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Current Version Override | ${{ needs.test-with-current-version.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 4-Digit Year Format | ${{ needs.test-four-digit-year.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Error Handling | ${{ needs.test-error-handling.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Multiple Sequential Runs | ${{ needs.test-multiple-runs.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Suffix Boundary (z→aa) | ${{ needs.test-suffix-boundary.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Fail if any required tests failed (excluding error handling which should fail)
          if [[ "${{ needs.test-basic.result }}" != "success" || 
                "${{ needs.test-with-current-version.result }}" != "success" || 
                "${{ needs.test-four-digit-year.result }}" != "success" || 
                "${{ needs.test-multiple-runs.result }}" != "success" ||
                "${{ needs.test-suffix-boundary.result }}" != "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some tests failed!**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
          fi 